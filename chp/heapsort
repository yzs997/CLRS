#include <vector>
#include <iostream>

using namespace std;

void heap_sort(vector<int> &vec, int n);
void build_heap(vector<int> &vec, int n);
void max_heapify(vector<int> &vec, int n, int i);

int main()
{
	vector<int> vec = { 5, 3, 17, 10, 84, 19, 6, 22, 9 };
	heap_sort(vec, vec.size());
	for (auto ele : vec)
		cout << ele << " ";
	cout << endl;
	getchar();
	return 0;
}

void heap_sort(vector<int> &vec, int n)
{
	build_heap(vec, n);
	for (int i = vec.size() - 1; i >= 0; i--)
	{	
		swap(vec[i], vec[0]);
		max_heapify(vec, --n, 0);
	}			
}
void build_heap(vector<int> &vec, int n)
{
	for (int i = vec.size() / 2 - 1; i >= 0; i--)
		max_heapify(vec, n, i);
}

void max_heapify(vector<int> &vec, int n, int i)
{
	int l = 2 * i;
	int r = 2 * i + 1;
	int largest = 0;
	if (l < n && vec[l] > vec[i])
		largest = l;
	else
		largest = i;
	if (r < n && vec[r] > vec[largest])
		largest = r;
	if (largest != i)
	{
		swap(vec[i], vec[largest]);
		max_heapify(vec, n, largest);
	}
}
